
ACCES Optimisation Run Directory
--------------------------------

This directory was generated by ACCES at 14:02:38 on 01/02/2022.

You can load the data saved by ACCES into a tidy Python object
using `coexist.AccessData.read(<dirpath>)`; alternatively, the
calibration / optimisation results may be read from the CSV
files (see below) in any external program.

All data can be accessed as the calibration progresses to check
intermediate results. This `access_seed123` directory
is self-contained and may be archived / moved outside the
initial ACCES folder.

You are welcome to read and use the data saved here, but
modifying or removing files is not recommended (except for the
files inside `outputs` and `results`, see below).


File Hierarchy
--------------

For a given simulation, ACCES runs are uniquely determined by a
seed for the stochastic algorithms and the number of parameter
combinations to try in one epoch (i.e. the population size).
The resulting hierarchy looks like this:

::

    access_seed<seed_number>
    ├── access_script.py
    ├── access_paths.pickle
    ├── access_setup.pickle
    ├── epochs_pop<population_size>.csv
    ├── epochs_pop<population_size>_scaled.csv
    ├── history_pop<population_size>.csv
    ├── history_pop<population_size>_scaled.csv
    ├── info.txt
    ├── readme.rst
    ├── outputs
    │   ├── stderr.0.log
    │   ...
    │   ├── stdout.0.log
    │   ...
    └── results
        ├── parameters.0.pickle
        ...
        ├── result.0.pickle
        ...

The `access_seed<seed_number>` is the current directory where
ACCES saves simulation results; naturally, don't execute
multiple ACCES runs with the same random seeds in the same
directory.

The `.pickle` files are binary "Pickle" archives saving
complete object states; they're fast, portable and convenient,
but they're Python-specific. You can load them using:

.. code-block:: python

    # Using the standard pickle module directly
    import pickle
    with open("filepath.pickle", "rb") as f:
        obj = pickle.load(f)

    # Or more tersely
    import coexist
    obj = coexist.load("filepath.pickle")

The `access_script.py` Python script is the modified user-code
that will be executed for each function evaluation.

The `access_paths.pickle` file contains a structure saving the
paths to all stored ACCES objects.

The `access_setup.pickle` file contains a structures saving the
constant ACCES objects for a given run: parameters, script,
population size, target uncertainty and random seed.

The `epochs_pop<population_size>.csv` file stores relevant data
for each epoch: the current parameter optimum estimates and
uncertainties; the other `_scaled.csv` file stores the same,
but scaled to the internal CMA-ES "phenotype space". Notably,
the uncertainties are scaled between 0 (perfect estimate) and
1 (the initial estimate); if the parameter response is very
nonlinear / convolved / inexistent, the uncertainty may
increase beyond 1. The column names are given in the file; the
number of rows is equal to the number of epochs completed.

The `history_pop<population_size>.csv` file stores the history
of ACCES results: for each epoch, the parameter combinations
tried and the evaluated error values.  The other `_scaled.csv`
file stores the same, but scaled to the internal CMA-ES
"phenotype space". The column names are given in the file; all
epochs are concatenated, so the number of rows will be the
population size multiplied by the number of executed epochs.

The `info.txt` file logs when ACCES runs are (re)started.
This `readme.rst` file is self-explanatory - you're reading it!

The `outputs` directory stores the captured `stdout` and
`stderr` messages that were emitted for each simulation.

The `results` directory stores the parameter values tried for
each simulation (e.g. `parameters.0.pickle`) and the
corresponding error value found (e.g. `result.0.pickle`).

The `outputs` and `results` directories are only needed for
logging purposes; you may safely remove the files inside *only
for the completed ACCES epochs*.
